---
import EventCard from "./EventCard.astro";
import AgendaIntermission from "../components/AgendaIntermission.astro";
import type { AgendaEvent, AgendaEventType } from "../types";
import { speakersData } from "../data/speakers-data";
import clsx from "clsx";

type Props = {
  events: [string, AgendaEventType[]][];
};

const { events } = Astro.props;
---

{
  events.map(([schedule, _events]) => {
    const hasMultipleEvents = _events.length > 1;

    return (
      <div class={clsx("flex my-8", { "mb-16": hasMultipleEvents })}>
        <div class="flex flex-col md:flex-row w-full gap-3 md:gap-6">
          <div class="h-20 w-20 md:h-40 md:w-40 rounded-3xl shrink-0 bg-[#232323] text-center flex mx-2 md:mx-0">
            <div class="h-min m-auto">
              <span class="text-2xl md:text-4xl font-black">
                {schedule.split(":")[0]}
              </span>
              <span class="text-xl md:text-2xl">:{schedule.split(":")[1]}</span>
            </div>
          </div>
          <div
            class={clsx("w-full rounded-3xl md:bg-[#232323]", {
              splide: hasMultipleEvents,
            })}
          >
            <div class={clsx({ splide__track: hasMultipleEvents })}>
              <ul class="splide__list">
                {_events.map((event) => {
                  if (event.type === "intermission") {
                    return (
                      <AgendaIntermission
                        name={event.name}
                        length={event.length}
                      />
                    );
                  }

                  return (
                    <EventCard
                      name={event.name}
                      length={event.length}
                      language={event.language}
                      speaker={{
                        name: speakersData[event.speaker.id].name,
                        url: `/speakers/${event.speaker.id}`,
                        description: speakersData[event.speaker.id].description,
                        imageUrl: speakersData[event.speaker.id].imageUrl,
                      }}
                      multiple={hasMultipleEvents}
                    />
                  );
                })}
              </ul>
            </div>
            {hasMultipleEvents && (
              <div class="splide__arrows absolute -bottom-12 left-6 rounded-xl bg-[#323232] divide-x divide-dashed p-1">
                <button class="splide__arrow--prev p-2 px-4 text-2xl">
                  &lt;
                </button>
                <button class="splide__arrow--next p-2 px-4 text-2xl">
                  &gt;
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  })
}

<script>
  import Splide from "@splidejs/splide";
  import "@splidejs/splide/dist/css/themes/splide-default.min.css";

  document.addEventListener("DOMContentLoaded", (event) => {
    const elms = document.getElementsByClassName(
      "splide"
    ) as HTMLCollectionOf<HTMLElement>;

    for (var i = 0; i < elms.length; i++) {
      const element = elms[i];
      if (element) {
        const splide = new Splide(element, {
          autoWidth: true,
          padding: { right: "10%" },
          perPage: 1,
          pagination: false,
        }).mount();

        // splide.on('active', (slideComponent) => {
        //   slideComponent.
        // })
      }
    }
  });
</script>
